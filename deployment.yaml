apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    deployment.kubernetes.io/revision: "1"
  labels:
    app: odoo-app
  name: odoo-deployment
  namespace: default
spec:
  replicas: 3
  selector:
    matchLabels:
      app: odoo-app
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: odoo-app
    spec:
      serviceAccountName: ksa-bidv-cloudsql
      containers:
      - image: asia-southeast1-docker.pkg.dev/odoo-lab-vsi/bidv-poc/bidv_poc
        imagePullPolicy: IfNotPresent
        name: odoo-app
        resources: {}
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        ports:
        - containerPort: 8069
        env:
        - name: DB_PORT_5432_TCP_ADDR
          value: "localhost"
        - name: DB_PORT_5432_TCP_PORT
          value: "5432"
        - name: DB_ENV_POSTGRES_USER
          value: "postgres"
        - name: INSTANCE_HOST
          value: "127.0.0.1"
        - name: DB_ENV_POSTGRES_USER
          value: "postgres"
        - name: DB_ENV_POSTGRES_PASSWORD
          value: "lPpZ?Av9G-Jmm#Q}"
        - name: DB_USER
          valueFrom:
            secretKeyRef:
              name: gke-cloud-sql-secrets
              key: username
        - name: DB_PASS
          valueFrom:
            secretKeyRef:
              name: gke-cloud-sql-secrets
              key: password
        - name: DB_NAME
          value: "postgres"
      - name: cloud-sql-proxy
        # This uses the latest version of the Cloud SQL proxy
        # It is recommended to use a specific version for production environments.
        # See: https://github.com/GoogleCloudPlatform/cloudsql-proxy 
        image: gcr.io/cloud-sql-connectors/cloud-sql-proxy:2.1.2
        command:
          - "/cloud_sql_proxy"

          # If connecting from a VPC-native GKE cluster, you can use the
          # following flag to have the proxy connect over private IP
          - "-ip_address_types=PRIVATE"

          # By default, the proxy will write all logs to stderr. In some
          # environments, anything printed to stderr is consider an error. To
          # disable this behavior and write all logs to stdout (except errors
          # which will still go to stderr), use:
          - "-log_debug_stdout"

          # Replace DB_PORT with the port the proxy should listen on
          # Defaults: MySQL: 3306, Postgres: 5432, SQLServer: 1433
          - "-instances=odoo-lab-vsi:asia-southeast1:odoo-bidv-doc=tcp:5432"
        securityContext:
          # The default Cloud SQL proxy image runs as the
          # "nonroot" user and group (uid: 65532) by default.
          runAsNonRoot: true
        # You should use resource requests/limits as a best practice to prevent
        # pods from consuming too many resources and affecting the execution of
        # other pods. You should adjust the following values based on what your
        # application needs. For details, see
        # https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
        # resources:
        #   requests:
        #     # The proxy's memory use scales linearly with the number of active
        #     # connections. Fewer open connections will use less memory. Adjust
        #     # this value based on your application's requirements.
        #     memory: "4Gi"
        #     # The proxy's CPU use scales linearly with the amount of IO between
        #     # the database and the application. Adjust this value based on your
        #     # application's requirements.
        #     cpu:    "1"
      dnsPolicy: ClusterFirst
      restartPolicy: Always